import streamlit as st
import time
import os
import sys
from pathlib import Path

module_path = str(Path(__file__).parent.parent)
if module_path not in sys.path:
    sys.path.append(module_path)

from services.copilot_business_model_v1 import create_agent, AgentWrapper

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="CoPilot Business Agent",
    page_icon="üíº",
    layout="wide",
)

# --- Fun√ß√µes Auxiliares ---
def initialize_agent():
    """
    Inicializa ou recupera a inst√¢ncia do agente do session_state.
    Recria o agente se as configura√ß√µes relevantes (API key, temperatura) mudaram.
    Retorna a inst√¢ncia do agente ou None se a API key n√£o estiver configurada.
    """
    openai_api_key = st.session_state.get("openai_api_input")
    temperature = st.session_state.get("temp_slider", 0.7) # Default se n√£o estiver no slider ainda

    if not openai_api_key or not openai_api_key.strip():
        st.sidebar.warning("Por favor, insira sua OpenAI API Key e clique em 'Salvar Configura√ß√µes'.")
        if "agent_instance" in st.session_state: # Limpa inst√¢ncia antiga se a key foi removida
            del st.session_state.agent_instance
        return None

    # verficar se o agente precisa ser recriado devido √† mudan√ßa de configura√ß√µes
    # Compara com as configura√ß√µes usadas na √∫ltima cria√ß√£o do agente 
    last_agent_config = st.session_state.get("last_agent_config", {})
    current_config = {"api_key": openai_api_key, "temp": temperature}

    if "agent_instance" not in st.session_state or last_agent_config != current_config:
        st.sidebar.info("Inicializando o agente com as novas configura√ß√µes...")
        try:
            # create_agent deve retornar a inst√¢ncia do AgentWrapper
            agent_instance = create_agent(
                openai_api_key=openai_api_key,
                temperature=temperature
            )
            st.session_state.agent_instance = agent_instance
            st.session_state.last_agent_config = current_config # Armazena config usada
            st.sidebar.success("Agente pronto!")
            

            if not st.session_state.messages or \
               (len(st.session_state.messages) == 1 and "Erro" in st.session_state.messages[0]["content"]):
        
                welcome_message = "Ol√°! Espero que esteja tudo bem. Em que posso ser √∫til?"
                if not any(msg["content"] == welcome_message for msg in st.session_state.messages):
                    st.session_state.messages.append({"role": "assistant", "content": welcome_message})

        except ValueError as e:
            st.sidebar.error(f"Erro de configura√ß√£o ao criar agente: {str(e)}")
            if "agent_instance" in st.session_state:
                del st.session_state.agent_instance # Remove inst√¢ncia falha
            return None
        except Exception as e:
            st.sidebar.error(f"Erro inesperado ao criar agente: {str(e)}")
            if "agent_instance" in st.session_state:
                del st.session_state.agent_instance
            return None
            
    return st.session_state.get("agent_instance")

# Fun√ß√£o para inicializar o estado da sess√£o (chamada uma vez)
def initialize_session_state_once():
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    if "user_id" not in st.session_state:
        # Usar um ID √∫nico por sess√£o para a mem√≥ria do agente
        st.session_state.user_id = f"streamlit_session_{int(time.time())}_{os.urandom(4).hex()}"

    # Inputs da sidebar precisam ser inicializados antes de serem usados
    # para que `initialize_agent` possa l√™-los na primeira execu√ß√£o.
    if "openai_api_input" not in st.session_state:
        st.session_state.openai_api_input = os.getenv("OPENAI_API_KEY", "")
    
    if "temp_slider" not in st.session_state:
        st.session_state.temp_slider = 0.7

# Chamada de inicializa√ß√£o √∫nica
initialize_session_state_once()

# --- Configura√ß√£o da Barra Lateral ---
with st.sidebar:
    st.title("‚öôÔ∏è Configura√ß√µes")
    
    st.header("API Key")
    st.text_input(
        "OpenAI API Key", 
        type="password",
        key="openai_api_input" # Este valor ser√° usado por initialize_agent
    )
    
    st.header("Par√¢metros do Modelo")
    st.slider(
        "Temperatura", 
        min_value=0.0, 
        max_value=1.0, 
        step=0.1,
        key="temp_slider" # Este valor ser√° usado por initialize_agent
    )
    
    if st.button("Salvar e Reiniciar Agente"):
        # A simples altera√ß√£o das chaves 'openai_api_input' ou 'temp_slider'
        # e a chamada de initialize_agent() na pr√≥xima intera√ß√£o/rerun
        # j√° cuidar√° da recria√ß√£o. Este bot√£o for√ßa um rerun e a verifica√ß√£o.
        st.success("Configura√ß√µes aplicadas. O agente ser√° reiniciado, se necess√°rio.")
        # For√ßar a limpeza da inst√¢ncia antiga para garantir a recria√ß√£o com novas chaves.
        if "agent_instance" in st.session_state:
            del st.session_state.agent_instance
        st.rerun() 

    st.header("Gerenciar Conversa")
    if st.button("Limpar Conversa"):
        st.session_state.messages = []

        if "agent_instance" in st.session_state and st.session_state.agent_instance:
             welcome_message = "Ol√°! Espero que esteja tudo bem. Em que posso ser √∫til?"
             st.session_state.messages.append({"role": "assistant", "content": welcome_message})
        st.success("Conversa apagada com sucesso!")
        st.rerun()
    
    st.divider()
    st.markdown("### Sobre")
    st.markdown("""
    **CoPilot Business Agent**
    
    Um assistente impulsionado por IA para an√°lise de dados e insights de neg√≥cios.
    """)

# --- L√≥gica Principal do Chat ---
st.title("üíº CoPilot Business Agent")
st.caption("Seu assistente de an√°lise de dados e neg√≥cios. ``Verifique sua barra lateral para mais detalhes``.")

# Tenta inicializar/recuperar o agente
agent = initialize_agent()

# Exibir mensagens do hist√≥rico
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Processamento da entrada do usu√°rio
if prompt := st.chat_input("Digite sua mensagem aqui..."):
    if not agent:
        st.warning("O agente n√£o est√° configurado. Por favor, verifique suas configura√ß√µes na barra lateral.")
        # Adiciona a mensagem do usu√°rio mesmo assim, para que n√£o se perca
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        # Adiciona uma mensagem de erro ao chat
        error_msg_chat = "‚ö†Ô∏è **Agente n√£o configurado.** Verifique a API Key e clique em 'Salvar Configura√ß√µes'."
        st.session_state.messages.append({"role": "assistant", "content": error_msg_chat})
        with st.chat_message("assistant"):
            st.markdown(error_msg_chat)
    else:
        # Adiciona a mensagem do usu√°rio ao hist√≥rico
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Prepara para exibir a resposta do assistente
        with st.chat_message("assistant"):
            with st.spinner("Pensando..."):
                try:
                    # Obtem a resposta do agente usando a inst√¢ncia persistente
                    response = agent.get_response(prompt, user_id=st.session_state.user_id)
                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})
                except ValueError as e: # Erros espec√≠ficos da l√≥gica do agente
                    error_msg = f"‚ö†Ô∏è **Erro do Agente**: {str(e)}"
                    st.error(error_msg)
                    st.session_state.messages.append({"role": "assistant", "content": error_msg})
                except Exception as e: # Outros erros inesperados
                    error_msg = f"‚öôÔ∏è **Ocorreu um erro inesperado**: {str(e)}"
                    st.error(error_msg)
                    st.session_state.messages.append({"role": "assistant", "content": error_msg})
